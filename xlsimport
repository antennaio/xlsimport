#!/usr/bin/env python

import os, sys
from optparse import OptionParser

try:
    import MySQLdb
except ImportError:
    print "Please install MySQLdb first."
    print "http://pypi.python.org/pypi/MySQL-python"
    exit(1)

try:
    from xlrd import open_workbook, cellname
except ImportError:
    print "Please install xlrd first."
    print "http://pypi.python.org/pypi/xlrd"
    exit(1)


class XLSImporter(object):
    """Import data from Excel and save it to a MySQL database."""

    def __init__(self):
        self.prog = os.path.basename(sys.argv[0])

        parser = OptionParser(version="%prog 0.1", usage="%prog [options] input files")

        parser.add_option("-t", "--test", action="store_true", dest="test_mode", default=False,
            help="test mode: do not modify database")
        parser.add_option("-q", "--quiet", action="store_true", dest="quiet_mode", default=False,
            help="quiet mode")
        parser.add_option("-s", "--db-host", dest="db_host", help="MySQL hostname")
        parser.add_option("-u", "--db-user", dest="db_user", help="MySQL username")
        parser.add_option("-p", "--db-password", dest="db_password", help="MySQL password")
        parser.add_option("-d", "--db-database", dest="db_database", help="MySQL database")
        parser.add_option("-b", "--db-table", dest="db_table", help="MySQL table")
        parser.add_option("-i", "--sheet", dest="sheet", help="index of the Excel sheet (default: 0)")
        parser.add_option("-x", "--update-if-exists", action="store", dest="update_mode",
            help="column name that will be used to detect and update a row in MySQL if it already exists")
        parser.add_option("-k", "--keep-if-exists", action="store", dest="keep_mode",
            help="column name that will be used to detect and keep a row unchanged in MySQL if it already exists")

        (self.options, self.args) = parser.parse_args()

        if self.options.update_mode and self.options.keep_mode:
            parser.error("options -x and -k are mutually exclusive")

        if not self.args:
            parser.error("no input files specified")

        if not self.options.db_password:
            self.options.db_password = ''

        if not self.options.sheet:
            self.options.sheet = 0

    def message(self, m, message_type=None):
        if not self.options.quiet_mode:
            if message_type:
                print "%s: %s: %s" % (self.prog, message_type, m)
            else:
                print "%s: %s" % (self.prog, m)

    def value_pad(self, key):
        return '%(' + str(key) + ')s'

    def establish_connection(self):
        try:
            conn = MySQLdb.connect(host=self.options.db_host, user=self.options.db_user,
                passwd=self.options.db_password, db=self.options.db_database)
        except TypeError:
            self.message("cannot connect to database, check your settings", "error")
            exit(1)
        except MySQLdb.Error, e:
            self.message("cannot connect to database (%d): %s" % (e.args[0], e.args[1]), "error")
            exit(1)

        return conn, conn.cursor()

    def execute_query(self, query, params=None):
        try:
            self.cursor.execute(query, params)
        except MySQLdb.Error, e:
            self.message("MySQL error (%d): %s" % (e.args[0], e.args[1]), "error")
            exit(1)

    def open_xls(self, file, index):
        try:
            xls = open_workbook(file)
        except IOError:
            self.message("no such file: %s" % file, "error")
            exit(1)

        try:
            sheet = xls.sheet_by_index(index)
        except IndexError:
            self.message("sorry, this sheet is out of range: %s" % index, "error")
            exit(1)

        return sheet

    def check_table(self, table):
        query = self.query['show'] % {
                'table': table
            }

        self.message(query, "sql")
        self.execute_query(query)

        if not self.cursor.rowcount:
            self.message("table '%s' does not exist" % table, "error")
            exit(1)

    query = {
        'show': "SHOW TABLES LIKE '%(table)s'",
        'select': "SELECT %(fields)s FROM %(table)s WHERE %(condition)s = %%s",
        'update': "UPDATE %(table)s SET %(fields)s WHERE %(condition)s = %%(searchstring)s",
        'insert': "INSERT INTO %(table)s (%(fields)s) VALUES (%(values)s)"
    }

    def process_file(self, file):
        self.message("opening: %s" % file)

        sheet = self.open_xls(file, int(self.options.sheet))

        self.message("rows in sheet: %s" % sheet.nrows)

        columns = []
        values = []

        needs_update = False

        for row_index in range(sheet.nrows):
            # store column names in a list
            if row_index == 0:
                for col_index in range(sheet.ncols):
                    columns.append(sheet.cell(row_index, col_index).value)

            # insert rows into MySQL database
            else:
                del values[:]
                for col_index in range(sheet.ncols):
                    values.append(sheet.cell(row_index, col_index).value)

                    # check if a row already exists
                    if self.options.keep_mode == columns[col_index] or self.options.update_mode == columns[col_index]:

                        query = self.query['select'] % {
                                'fields': columns[col_index],
                                'table': self.options.db_table,
                                'condition': columns[col_index]
                            }

                        self.message(query % sheet.cell(row_index, col_index).value, "sql")
                        self.execute_query(query, sheet.cell(row_index, col_index).value)
                        needs_update = sheet.cell(row_index, col_index).value if self.cursor.rowcount else False

                query = ""
                row = dict(zip(columns, values))

                # update row?
                if self.options.update_mode and needs_update:
                    self.message("matching row found, updating row")

                    query = self.query['update'] % {
                            'table': self.options.db_table,
                            'fields': ', '.join(["%s = %s" % (c[1], self.value_pad(c[1])) for c in enumerate(columns)]),
                            'condition': self.options.update_mode
                        }

                    row['searchstring'] = needs_update

                # do nothing?
                elif self.options.keep_mode and needs_update:
                    self.message("matching row found, skipping row")

                # insert row?
                else:
                    query = self.query['insert'] % {
                            'table': self.options.db_table,
                            'fields': ', '.join(row),
                            'values': ', '.join(map(self.value_pad, row))
                        }

                # execute query
                if query:
                    self.message(query % row, "sql")
                    if not self.options.test_mode:
                        self.execute_query(query, row)

    def run(self):
        self.message("connecting to database")
        self.message("host: %s" % self.options.db_host)
        self.message("user: %s" % self.options.db_user)
        self.message("password: %s" % self.options.db_password)
        self.message("database: %s" % self.options.db_database)
        self.message("table: %s" % self.options.db_table)

        self.conn, self.cursor = self.establish_connection()

        self.check_table(self.options.db_table)

        # process files
        for f in self.args:
            self.process_file(f)

        self.cursor.close()
        self.conn.commit()
        self.conn.close()

        if not self.options.test_mode:
            self.message("success: data import completed")
        else:
            self.message("success: test run completed")

if __name__ == '__main__':
    importer = XLSImporter()
    importer.run()
